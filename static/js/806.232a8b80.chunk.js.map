{"version":3,"file":"static/js/806.232a8b80.chunk.js","mappings":"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","sources":["components/Title/Title.styled.jsx","components/Title/Title.jsx","components/ContactsPage/ContactsPage.style.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/ContactList/ContactList.styled.jsx","components/Filter/Filter.jsx","components/Contact/Contact.styled.jsx","components/NotContacts/NotContacts.styled.jsx","components/NotContacts/NotContacts.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const TitleSection = styled.div`\n  font-size: 28px;\n  font-weight: 600;\n  color: rgb(65, 65, 65);\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { TitleSection } from './Title.styled';\nimport propTypes from 'prop-types';\n\nconst Title = ({ text }) => {\n  return <TitleSection>{text}</TitleSection>;\n};\n\nTitle.propTypes = {\n  text: propTypes.string,\n};\nexport default Title;\n","import styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const FormPerson = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  /* margin-bottom: 20px; */\n  max-width: 600px;\n`;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormPerson } from './Form.styled';\nimport Grid from '@mui/material/Grid';\nimport propTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nimport { useAddContactMutation } from 'server/contacts';\nimport { toast } from 'react-toastify';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [updatePost, { isError }] = useAddContactMutation();\n\n  //генерируем необходимые ключи\n  const idName = nanoid();\n  const idTel = nanoid();\n\n  // универсальный метод для инпутов\n  const onCangeInpute = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  //внутрений метод сабмита обрабатывающий событие\n  const formSubmit = event => {\n    event.preventDefault();\n    updatePost({ name, number });\n    reset();\n  };\n\n  // очистка формы\n  const reset = () => {\n    setName('');\n    setNumber('');\n    // тут же нам необходимо очистить локалку чтоб вводимые ранее значения не всплыли вновь\n    localStorage.removeItem('write');\n  };\n  const tosty = () => {\n    toast.error('Error add');\n  };\n\n  return (\n    <FormPerson action=\"\" onSubmit={formSubmit}>\n      {isError && tosty()}\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Name\"\n            id={idName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            fullWidth\n            onChange={onCangeInpute}\n            value={name}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Telephon\"\n            id={idTel}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={onCangeInpute}\n          />\n        </Grid>\n      </Grid>\n      <Button variant=\"contained\" fullWidth sx={{ mt: 3, mb: 2 }} type=\"submit\">\n        Save\n      </Button>\n    </FormPerson>\n  );\n};\n\nForm.propTypes = { chengeSabmit: propTypes.func };\n","import styled from '@emotion/styled';\n\nexport const ListPersons = styled.ul`\n  list-style: none;\n  color: rgb(0, 3, 36);\n  font-weight: 500;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-top: 35px;\n  margin-left: auto;\n  margin-right: auto;\n  @media (min-width: 1200px) {\n    width: 540px;\n  }\n  @media (max-width: 1199px) {\n    width: 460px;\n  }\n  @media (max-width: 767px) {\n    width: 320px;\n  }\n`;\n\nexport const BoxPersons = styled.ul`\n  max-width: 600px;\n  @media (min-width: 1200px) {\n    width: 600px;\n  }\n  @media (max-width: 1199px) {\n    width: 540px;\n  }\n  @media (max-width: 767px) {\n    width: 320px;\n  }\n`;\n","// import { FilterPerson } from './Filter.styled';\nimport propTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { newFilter } from 'redux/sliceFilter';\nimport TextField from '@mui/material/TextField';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  // метод просто обновляет состояние при вводе текста\n  const onSaveFinde = event => {\n    dispatch(newFilter(event.currentTarget.value.trim().toLowerCase()));\n  };\n\n  return (\n    <TextField\n      label=\"Find contact\"\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={onSaveFinde}\n      fullWidth\n    />\n  );\n};\nFilter.propTypes = {\n  filter: propTypes.string,\n  onFinde: propTypes.func,\n};\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const DeletedPerson = styled.button`\n  color: brown;\n  background-color: transparent;\n  height: 15px;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  border-radius: 5px;\n  border-color: #d68686;\n  :hover {\n    background-color: #a70303;\n    color: #ffffff;\n  }\n`;\n\nexport const Person = styled.li`\n  margin-bottom: 8px;\n  color: rgb(82, 82, 82);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 25px;\n  border-bottom: 1px solid rgb(175, 168, 106);\n`;\n","import styled from '@emotion/styled';\n\nexport const Nossing = styled.div`\n  margin: 10px;\n  color: rgb(116, 41, 41);\n  font-weight: 500;\n  font-size: 16px;\n  text-align: center;\n`;\n","import { Nossing } from './NotContacts.styled';\nimport propTypes from 'prop-types';\n\nconst NotContacts = ({ text }) => {\n  return <Nossing>{text}</Nossing>;\n};\n\nNotContacts.propTypes = {\n  text: propTypes.string,\n};\nexport default NotContacts;\n","import { Person, DeletedPerson } from './Contact.styled';\nimport propTypes from 'prop-types';\n\nimport { useDeletedContactMutation } from 'server/contacts';\nimport NotContacts from 'components/NotContacts/NotContacts';\n\nconst Contact = ({ elem }) => {\n  const [deleted, { isLoading: isDeleted }] = useDeletedContactMutation(); //после делетед мы можем принимать опции удаления если нужно. [ a, {} ]\n  return (\n    <>\n      {isDeleted ? (\n        <NotContacts text={'Wite we deleting'} />\n      ) : (\n        <Person>\n          {elem.name} : {elem.number}\n          <DeletedPerson\n            onClick={() => {\n              deleted(elem.id);\n            }}\n          >\n            <div>Delete</div>\n          </DeletedPerson>\n        </Person>\n      )}\n    </>\n  );\n};\n\nContact.propTypes = {\n  elem: propTypes.object,\n};\n\nexport default Contact;\n","import { ListPersons, BoxPersons } from './ContactList.styled';\nimport Filter from 'components/Filter/Filter';\nimport Contact from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport NotContacts from 'components/NotContacts/NotContacts';\n\nconst ContactList = ({ contacts }) => {\n  const filter = useSelector(state => state.filter);\n\n  const findeByName = () => {\n    return contacts.filter(\n      elem =>\n        elem.name.slice(0, filter.length).toLowerCase() === filter.toLowerCase()\n    );\n  };\n\n  let nameContacts = findeByName();\n\n  return (\n    <BoxPersons>\n      <Filter />\n      {contacts.length > 0 ? (\n        <ListPersons>\n          {nameContacts.map(el => (\n            <Contact key={el.id} elem={el} />\n          ))}\n        </ListPersons>\n      ) : (\n        <NotContacts text={'List empty now'} />\n      )}\n    </BoxPersons>\n  );\n};\n\nexport default ContactList;\n","import Title from 'components/Title/Title';\nimport { Section } from './ContactsPage.style';\nimport { Form } from 'components/Form/Form';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useGetAllContactsQuery } from 'server/contacts';\nimport NotContacts from 'components/NotContacts/NotContacts';\n\nfunction ContactsPage() {\n  const { data: contacts, isLoading } = useGetAllContactsQuery();\n\n  return (\n    <Section>\n      <Title text={'Phonebook'} />\n      <Form />\n      <Title text={'Contacts:'} />\n      {!isLoading ? (\n        <ContactList contacts={contacts} />\n      ) : (\n        <NotContacts text={'LOADING'} />\n      )}\n    </Section>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["TitleSection","styled","text","Section","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FormPerson","Form","useState","name","setName","number","setNumber","useAddContactMutation","updatePost","isError","idName","idTel","onCangeInpute","event","currentTarget","value","reset","localStorage","removeItem","action","onSubmit","preventDefault","toast","Grid","container","spacing","item","xs","TextField","label","type","pattern","title","required","fullWidth","onChange","Button","variant","sx","mt","mb","ListPersons","BoxPersons","filter","useSelector","state","dispatch","useDispatch","newFilter","trim","toLowerCase","DeletedPerson","Person","Nossing","elem","useDeletedContactMutation","deleted","isDeleted","isLoading","onClick","contacts","nameContacts","slice","length","map","el","useGetAllContactsQuery","data"],"sourceRoot":""}